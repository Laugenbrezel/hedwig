package de.ikano.hedwig.controller;

import javax.annotation.PostConstruct;
import javax.ejb.Stateful;
import javax.enterprise.event.Event;
import javax.enterprise.inject.Model;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;

import org.jboss.logging.Logger;
import org.jboss.seam.solder.logging.Category;

import de.ikano.hedwig.model.Target;


// The @Stateful annotation eliminates the need for manual transaction demarcation
@Stateful
// The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an
// EL name
// Read more about the @Model stereotype in this FAQ:
// http://sfwk.org/Documentation/WhatIsThePurposeOfTheModelAnnotation
@Model
public class TargetHome {

   @Inject
   @Category("hedwig")
   private Logger log;

   @Inject
   private EntityManager em;

   @Inject
   private Event<Target> targetEventSrc;
   @Inject
   private PatrolBean patrolBean;

   private Target newTarget;

   @Produces
   @Named
   public Target getNewTarget() {
      return newTarget;
   }

   public void save() throws Exception {
      log.info("Saving " + newTarget.getName());
      em.persist(newTarget);
      targetEventSrc.fire(newTarget);
      initNewMember();
   }

   @PostConstruct
   public void initNewMember() {
      newTarget = new Target();
   }
   
   public void save(Target target) {
       log.info("Updating: "+target);
       em.merge(target);
   }
   
   public void check() {
	   patrolBean.checkSingleTarget(newTarget);
   }
}
